import pandas as pd
import numpy as np
import random as rnd

# visualization
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline

# machine learning
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC, LinearSVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import Perceptron
from sklearn.linear_model import SGDClassifier
from sklearn.tree import DecisionTreeClassifier
train_df = pd.read_csv('/content/titanic.csv')
test_df = pd.read_csv('/content/titanic.csv')
combine = [train_df, test_df]
  print(train_df.columns.values)
train_df.head()
  train_df.tail()
  train_df.info()
print('_'*40)
test_df.info()
  train_df.describe()
  train_df.describe(include=['O'])
  train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)
  train_df[["Sex", "Survived"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)
  train_df[["SibSp", "Survived"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)
  train_df[["Parch", "Survived"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)
  g = sns.FacetGrid(train_df, col='Survived')
g.map(plt.hist, 'Age', bins=20)
  !pip install seaborn
import seaborn as sns
import matplotlib.pyplot as plt
# Load the train_df data into a variable called train_df
# Here, we assume the data is already loaded into train_df
# Fix the code by removing the 'size' and 'aspect' arguments
grid = sns.FacetGrid(train_df, col='Survived', row='Pclass')
# Map the histogram of 'Age' onto the grid
grid.map(plt.hist, 'Age', alpha=.5, bins=20)
# Add a legend
grid.add_legend()
# Show the plot
plt.show()
  guess_ages = np.zeros((2,3))
guess_ages
import numpy as np
import pandas as pd
print(guess_ages)
print(dataset[dataset['Age'].isnull()].head())
guess_ages[np.isnan(guess_ages)] = 0
dataset = dataset[~dataset['Age'].isnull()]
for i in range(0, 2):
    for j in range(0, 3):
        dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),\
                  'Age'] = guess_ages[i,j]
dataset['Age'] = dataset['Age'].astype(int)
train_df.head()
train_df['AgeBand'] = pd.cut(train_df['Age'], 5)
train_df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)
for dataset in combine:    
    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0
    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1
    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2
    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3
    dataset.loc[ dataset['Age'] > 64, 'Age']
train_df.head()
train_df = train_df.drop(['AgeBand'], axis=1)
combine = [train_df, test_df]
train_df.head()
  for dataset in combine:
    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1
train_df[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)
  for dataset in combine:
    dataset['IsAlone'] = 0
    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1
train_df[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()
